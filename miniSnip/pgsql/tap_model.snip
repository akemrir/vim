? pg_tap model
begin;
select plan(<{2}>);

\o cols.txt
select text from gen_cols_tests where schema_table = '<{schema}>.<{model}>' order by text;
select text from gen_col_tests where schema_table = '<{~2}>.<{~3}>' order by text;
select text from gen_col_has_default_tests where schema_table = '<{~2}>.<{~3}>' order by text;
select text from gen_col_not_null_tests where schema_table = '<{~2}>.<{~3}>' order by text;
select text from gen_index_tests where schema_table = '<{~2}>.<{~3}>' order by text;
select text from gen_trigger_tests where schema_table = '<{~2}>.<{~3}>' order by text;
\o

-- Columns
-- select columns_are('<{~2}>', '<{~3}>',
--   array[ 'id', 'user_id', 'body', 'lang', 'created_at', 'updated_at']
-- );

-- select col_type_is('<{~2}>', '<{~3}>', 'id', 'integer', 'type: integer' );
-- select col_type_is('<{~2}>', '<{~3}>', 'user_id', 'text', 'type: text' );
-- select col_type_is('<{~2}>', '<{~3}>', 'body', 'character varying(500)', 'type: character varying(500)' );
-- select col_type_is('<{~2}>', '<{~3}>', 'lang', '<{~2}>.locale', 'type: <{~2}>.locale' );
-- select col_type_is('<{~2}>', '<{~3}>', 'created_at', 'timestamp with time zone', 'type: timestamptz' );
-- select col_type_is('<{~2}>', '<{~3}>', 'updated_at', 'timestamp with time zone', 'type: timestamptz' );

-- select col_not_null('<{~2}>', '<{~3}>', 'user_id', 'should be not null');
-- select col_not_null('<{~2}>', '<{~3}>', 'gender', 'should be not null');

-- select col_is_unique('<{~2}>', '<{~3}>', 'user_id', 'should be unique');
-- select col_is_unique('<{~2}>', '<{~3}>', 'nickname', 'should be unique');

-- select col_has_default('<{~2}>', '<{~3}>', 'user_id', 'should have default');
-- select col_has_default('<{~2}>', '<{~3}>', 'created_at', 'should have default');
-- select col_has_default('<{~2}>', '<{~3}>', 'updated_at', 'should have default');
--
-- foreign key
-- select fk_ok('<{~2}>', '<{~3}>', 'user_id', '<{~2}>', 'user', 'id');
-- select col_is_fk('<{~2}>', '<{~3}>', 'user_id', 'should be foreign key');

-- keys
-- select has_pk('<{~2}>', '<{~3}>', 'Has a Primary Key' );
-- select col_is_pk('<{~2}>', '<{~3}>', 'id', 'Column is Primary Key -- id' );
-- select col_is_pk('<{~2}>', '<{~3}>', array['account_type','premium','attachable_type'], 'Column is Primary Key -- composite' );

-- indexes
-- select has_index('<{~2}>', '<{~3}>', '<{~3}>_id_idx', 'id', 'column has index -- id' );
-- select has_index('<{~2}>', '<{~3}>', '<{~3}>_pkey', 'id', 'column has index -- id' );
-- select has_index('<{~2}>', '<{~3}>', '<{~3}>_pkey', array['account_type','premium','attachable_type'], 'Column has index -- composite' );
-- select indexes_are(
--     '<{~2}>',
--     '<{~3}>',
--     array[
--       '<{~3}>_id_idx',
--       '<{~3}>_pkey'
--     ]
-- );
-- select index_is_unique('<{~2}>', '<{~3}>', 'liking_comment_id_idx');

-- constraints
-- select col_is_unique( '<{~2}>', '<{~3}>', 'id', 'Id columns has unique constraint' );

-- checks
-- select has_check('<{~2}>', '<{~3}>', 'has only_one_resource' );
-- select col_has_check( '<{~2}>', '<{~3}>', 'nickname', 'has person_profile_nickname_check' );
-- select col_has_check( '<{~2}>', '<{~3}>', 'birthyear', 'has person_profile_birthyear_check' );

select * from finish();
rollback;
