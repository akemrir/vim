? pg_tap rpc function
begin;
select plan(<{0}>);

tap_session

insert into <{schema}>.user(id, account_type, email, phone)
  values('some_id', 'person'::<{~2}>.account_type, 'test@gmail.com', '+48111444222');
insert into <{~2}>.person_profile(user_id, nickname, gender)
  values('some_id', null, 'male'::<{~2}>.gender);
insert into <{~2}>.post(id, body, lang)
  values(1, 'Nowy post', 'pl'::<{~2}>.locale);
insert into <{~2}>.comment(id, user_id, post_id, body)
  values(1, 'some_id', 1, 'Nowy post');

select ok( count(*) = 0 ) from <{~2}>.liking;

-- prepare not_completed_profile as select * from <{api.toggle_like}>('{ <{"post_id": 1}> }'::json);
-- select throws_ok(
--   'not_completed_profile',
--   'PT417',
--   'Expectation failed'
-- );
-- select ok( count(*) = 0 ) from <{~2}>.comment;

update <{~2}>.person_profile set first_name = 'Gnom' where user_id = 'some_id';
update <{~2}>.user set profile_completed = true where id = 'some_id';

select ok( count(*) = 0 ) from <{~2}>.liking;

prepare create_post_like as select * from <{~3}>('{ <{~4}> }'::json);
select results_eq(
  'create_post_like',
  $$
    values
      (1)
  $$
);
select results_eq(
  'select user_id::text, post_id::text, comment_id::text from <{~2}>.liking',
  $$values ('some_id'::text, '1'::text, null)$$
);
select ok( count(*) = 1 ) from <{~2}>.liking;

prepare delete_post_like as select * from <{~3}>('{ <{~4}> }'::json);
select results_eq(
  'delete_post_like',
  $$
    values
      (1)
  $$
);
select is_empty('select * from <{~2}>.liking');
select ok( count(*) = 0 ) from <{~2}>.liking;

prepare create_comment_like as select * from <{~3}>('{ <{~4}> }'::json);
select results_eq(
  'create_comment_like',
  $$
    values
      (1)
  $$
);
select results_eq(
  'select user_id::text, post_id::text, comment_id::text from <{~2}>.liking',
  $$
    values
      ('some_id'::text, null, '1'::text)
  $$
);
select ok( count(*) = 1 ) from <{~2}>.liking;

prepare delete_comment_like as select * from <{~3}>('{ <{~4}> }'::json);
select results_eq(
  'delete_comment_like',
  $$
    values
      (1)
  $$
);
select is_empty('select * from <{~2}>.liking');
select ok( count(*) = 0 ) from <{~2}>.liking;

select * from finish();
rollback;
